
###Overview###

This Docker container serves as a component within a data streaming pipeline designed to process 
IoT data. It facilitates the ingestion of data from MQTT (Message Queuing Telemetry Transport) 
topics and forwards it to a Kafka cluster for further processing and storage.



###Functionality###

The primary functionality of this Docker container includes:

    *Subscribing to one or more MQTT topics to receive incoming data messages.
    *Processing received messages and forwarding them to a Kafka topic.
    *Utilizing a Kafka producer client to ensure reliable message delivery to the Kafka cluster.


### Process Description ###

    *MQTT Message Consumption:
        The container utilizes the Paho-MQTT Python client library to connect to the MQTT broker and subscribe to the specified MQTT topic(s).
        Within the on_message callback method provided by Paho-MQTT, the container receives incoming MQTT messages.
        Upon message reception, the container extracts relevant data and prepares it for ingestion into Kafka.

    *Kafka Message Production:
        Upon receiving MQTT messages in the on_message callback, the container uses a singleton Kafka class to establish a connection to the Kafka cluster.
        It instantiates a Kafka producer instance within the on_message callback to send the processed data messages to the designated Kafka topic.

    *Latency Monitoring:
        The container employs the Python logging library to log timestamps for crucial events.
        Logging is utilized:
            When MQTT messages are consumed from the MQTT topic to track the ingestion latency.
            When messages are produced into the Kafka topic to monitor the processing and forwarding latency.

    *Docker Configuration:
        The Dockerfile for this container is based on the python:3.8-slim image to ensure a lightweight Python environment.
        A requirements.txt file specifies the necessary Python dependencies, including the Paho-MQTT and Kafka client libraries.

    *Singleton Kafka Class:
        The kafka_class.py file contains a Python class named Singleton_kafka_producer, designed as a singleton to manage a single instance of the Kafka producer client across the application.
        This class abstracts the complexities of Kafka client initialization and ensures thread-safe access to the Kafka producer within the container.
        

### Summary ###

This Docker container facilitates the ingestion of IoT data from MQTT topics into a Kafka cluster. 
It employs a Python script to consume MQTT messages, a singleton Kafka class to manage the Kafka producer client, and is packaged 
using a Dockerfile with Python dependencies specified in requirements.txt.